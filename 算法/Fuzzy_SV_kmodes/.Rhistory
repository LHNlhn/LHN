}
ICenters<-vector()
IniCenters<-vector()
for(i in 1:length(InitialCenters))
{
ICenters<-Data[Data[,1]==InitialCenters[i],2]
Ini_Centers<-cbind(i,ICenters)
IniCenters<-rbind(IniCenters,Ini_Centers)
}
ni<-as.matrix(IniCenters)
ni
udata<-as.matrix(unique(Data[,1]))
udata
cid<-matrix(0,nrow=1,ncol=K)
nr<-matrix(1,nrow=1,ncol=K)
nj<-vector()
i<-1
i_bolck_Newdata<-Data[Data[,1]==udata[i],2]
i_bolck_Newdata
New_ratio_distance_between_objects<-function(DData1,DData2)
{
ddateset<-vector()
DDistance<-vector()
DDistance<-0
ml<-length(union(DData1, DData2))
gl<-length(intersect(DData1, DData2))
DDistance<-(1-gl/ml)
ddateset<-DDistance
}
for(j in 1:K)
{
k_block<-ni[ni[,1]==j,2]
Dist<-New_ratio_distance_between_objects(i_bolck_Newdata,k_block)
dist[j]<-Dist
}
dist()
dist
i_bolck_Newdata<-Data[Data[,1]==udata[i],2]
j<-1
k_block<-ni[ni[,1]==j,2]
k_block
Dist<-New_ratio_distance_between_objects(i_bolck_Newdata,k_block)
Dist
j<-2
k_block<-ni[ni[,1]==j,2]
Dist<-New_ratio_distance_between_objects(i_bolck_Newdata,k_block)
Dist
j<-3
k_block<-ni[ni[,1]==j,2]
Dist<-New_ratio_distance_between_objects(i_bolck_Newdata,k_block)
Dist
i<-1
i_bolck_Newdata<-Data[Data[,1]==udata[i],2]
for(j in 1:K)
{
k_block<-ni[ni[,1]==j,2]
Dist<-New_ratio_distance_between_objects(i_bolck_Newdata,k_block)
dist[j]<-Dist
}
dist<-vector()
i_bolck_Newdata<-Data[Data[,1]==udata[i],2]
for(j in 1:K)
{
k_block<-ni[ni[,1]==j,2]
Dist<-New_ratio_distance_between_objects(i_bolck_Newdata,k_block)
dist[j]<-Dist
}
dist
nrow(dist)
ncol(dist)
dist
nrow(dist)
dist<-as.matrix(dist)
nrow(dist)
ncol(dist)
dist
for(i in 1:length(udata))
{
i_bolck_Newdata<-Data[Data[,1]==udata[i],2]
for(j in 1:K)
{
k_block<-ni[ni[,1]==j,2]
Dist<-New_ratio_distance_between_objects(i_bolck_Newdata,k_block)
dist[j]<-Dist
}
dist<-as.matrix(dist)
N<-nrow(dist)
for(q in 1:N)
{
DS<-dist[q,]
if(DS==0){
D_Dist<-1
}else{
w<-matrix(c(DS),nrow=K,ncol=1)
D_Dist<-1/(sum((w/dist)^10))
}
}
Fw_dist<-as.matrix(D_Dist)
ind<-which(Fw_dist==max(Fw_dist[,1]),arr.ind=T)[1]
cid[i]<-ind
}
cid
length(cid)
for(i in 1:length(udata))
{
i_bolck_Newdata<-Data[Data[,1]==udata[i],2]
for(j in 1:K)
{
k_block<-ni[ni[,1]==j,2]
Dist<-New_ratio_distance_between_objects(i_bolck_Newdata,k_block)
dist[j]<-Dist
}
dist<-as.matrix(dist)
N<-nrow(dist)
for(q in 1:N)
{
DS<-dist[q,]
if(DS==0){
D_Dist[q]<-1
}else{
w<-matrix(c(DS),nrow=K,ncol=1)
D_Dist[q]<-1/(sum((w/dist)^10))
}
}
Fw_dist<-as.matrix(D_Dist)
ind<-which(Fw_dist==max(Fw_dist[,1]),arr.ind=T)[1]
cid[i]<-ind
}
cid
nr<-table(cid)
temp_new_clusters<-vector()
modesset<-vector()
new_modesset<-vector()
NEW_modesset<-vector()
for(p in 1:K)
{
#?业?每一???????????荩???为?麓渭????木???????
np<-length(which(cid==p))
t_temp<-udata[which(cid==p)]
New_data<-vector()
if(np==1){
modesset<-matrix(c(Data[which(Data[,1]==t_temp),][,2]),ncol=1)
}else
{
for(j in 1:np)
{
New_data<-rbind(New_data,Data[Data[,1]==t_temp[j],])
}
modesset<-Mean_New_ratio_computing_modes(New_data)
}
modesset<-as.matrix(modesset)
new_modesset<-cbind(p,modesset)
NEW_modesset<-rbind(NEW_modesset,new_modesset)
}
nj<-as.matrix(NEW_modesset)
Mean_New_ratio_computing_modes<-function(data)
{
n<-length(unique(data[,1]))
result<-vector()
attribute_value<-vector()
mean_value<-vector()
attribute_value<-unique(data[,2])
mean_value<-matrix(c(attribute_value),nrow=1)
index_matrix<-vector()
att_value_num<-length(attribute_value)
att_num<-vector()
for(i in 1:att_value_num)
{
att_num[i]<-length(which(attribute_value[i]==data[,2]))
}
index_matrix<-matrix(c(att_num),nrow=1)
att_index_matrix<-matrix(c(mean_value,index_matrix),nrow=2,byrow=T)
temp_value<-vector()
temp_value<-att_index_matrix[,order(att_index_matrix[2,],decreasing =T)]
r<-round((sum(length(data[,2])))/n)
SS<-vector()
TT<-unique(temp_value[2,])
for(i in 1:length(TT))
{
SS[i]<-length(which(TT[i]==temp_value[2,]))
}
TT_matrix<-matrix(c(TT),nrow=1)
SS_matrix<-matrix(c(SS),nrow=1)
Ttemp_value<-rbind(TT_matrix,SS_matrix)
nT<-ncol(Ttemp_value)
aa<-0
bb<-0
for(m in 1:nT)
{
aa<-length(which(temp_value[2,]==max(temp_value[2,])))
bb<-(bb+aa)
result<-temp_value[1,1:aa]
if (bb>=r)  break
else  temp_value<-temp_value[,-(1:aa)]
}
tempzz<-vector()
temp_value<-att_index_matrix[,order(att_index_matrix[2,],decreasing =T)]
new_mode<-vector()
dd<-which(temp_value[1,]==result[1])
new_mode<-temp_value[1,1:(dd-1)]
tempzz<-t(combn(result,r-length(new_mode)))
nt<-nrow(tempzz)
union_value_F<-vector()
for(j in 1:nt)
{
union_value_frequency<-0
for(i in 1:length(new_mode))
{
union_value<-union(new_mode[i],tempzz[j,])
for(e in 1:n)
{
data2<-data[data[,1]==e,2]
att_matrix<-intersect(union_value,data2)
if(length(att_matrix)==length(union_value))
{union_value_frequency<-union_value_frequency+1}
}
}
union_value_F[j]<-union_value_frequency
}
cc<-which(union_value_F==max( union_value_F))[1]
NEW_modes<-union(new_mode,tempzz[cc,])
}
temp_new_clusters<-vector()
modesset<-vector()
new_modesset<-vector()
NEW_modesset<-vector()
for(p in 1:K)
{
#?业?每一???????????荩???为?麓渭????木???????
np<-length(which(cid==p))
t_temp<-udata[which(cid==p)]
New_data<-vector()
if(np==1){
modesset<-matrix(c(Data[which(Data[,1]==t_temp),][,2]),ncol=1)
}else
{
for(j in 1:np)
{
New_data<-rbind(New_data,Data[Data[,1]==t_temp[j],])
}
modesset<-Mean_New_ratio_computing_modes(New_data)
}
modesset<-as.matrix(modesset)
new_modesset<-cbind(p,modesset)
NEW_modesset<-rbind(NEW_modesset,new_modesset)
}
nj<-as.matrix(NEW_modesset)
nj
x<-c(1,2,3,2,1,2,3,3)
v<-as.data.frame(t(table(x)))[,c(2,3)]
v
x0<-v[,2][match(x,v[,1])]
x0
Data
unique(Data[,1])
n<-unique(Data[,1])
for(i in 1:n)
{
Data1<-Data[which(Data[,1])==i,]
}
Vx
data<-Data
data1<-unique(data[,1])
q<-length(data1)
Vx<-vector()
for(i in 1:q)
{
x<-data[data[,1]==data1[i],2]
v<-as.data.frame(t(table(x)))[,c(2,3)]
xx<-v[,2][match(x,v[,1])]
m<-length(x)
px<-xx/m
Lx<-cbind(x,px)
Vx<-rbind(Vx,Lx)
}
Vx
temp_value<-as.matrix(tapply(Vx[,2],Vx[,1],sum))
temp_value
tapply(Vx[,2],Vx[,1],sum)
as.data.frame(tapply(Vx[,2],Vx[,1],sum))
r<-round((sum(length(data[,2])))/n)
r
r<-round((length(data[,2]))/n)
r
n<-nrow(data)
n
n<-nrow(data1)
n
data1<-unique(data[,1])
n<-nrow(data1)
n
n<-ncol(data1)
n
data1
q<-length(data1)
q
r<-round((length(data[,2]))/q)
r
unique(Vx[,1])
temp_value<-as.matrix(tapply(Vx[,2],Vx[,1],sum))
temp_value
tapply(Vx[,2],Vx[,1],sum)
rbind(Vx[,1])
newdata<-vector()
rbind(newdata,Vx[,1])
ww<-matrix(c(1,1,8,2,9,3,10,4,5,5,2,1,1,3,2,5,5,1),nrow=9,ncol=2,byrow = T)
ww
tapply(ww[,2],ww[,1],sum)
unique(Vx[,1])
order(unique(Vx[,1]),decreasing = TRUE)
order(unique(Vx[,1]),decreasing = FALSE)
temp_value<-as.matrix(tapply(Vx[,2],Vx[,1],sum))
temp_value
mean_value<-order(unique(Vx[,1]),decreasing = FALSE)
mean_value
rbind(mean_value,temp_value)
mean_value<-as.matrix(order(unique(Vx[,1]),decreasing = FALSE))
mean_value
rbind(mean_value,temp_value)
cbind(mean_value,temp_value)
temp_value<-as.matrix(tapply(Vx[,2],Vx[,1],sum))
temp_value
tapply(Vx[,2],Vx[,1],sum)
order(unique(Vx[,1]),decreasing = FALSE)
unique(Vx[,1])
mean_value<-as.matrix(order(unique(Vx[,1]),decreasing = TRUE))
mean_value
mean_value<-as.matrix(order(Vx[,1],decreasing = TRUE))
mean_value
Vx[,1]
sort(unique(Vx[,1]),decreasing = TRUE)
mean_value<-as.matrix(sort(unique(Vx[,1]),decreasing = FALSE))
mean_value
temp_value<-as.matrix(tapply(Vx[,2],Vx[,1],sum))
temp_value
cbind(temp_value,mean_value)
temp_value<-as.matrix(tapply(Vx[,2],Vx[,1],sum))
mean_value<-as.matrix(sort(unique(Vx[,1]),decreasing = FALSE))
cbind(mean_value,temp_value)
tapply(Vx[,2],Vx[,1],sum)
temp_value<-t(cbind(mean_value,TTemp_value))
TTemp_value<-as.matrix(tapply(Vx[,2],Vx[,1],sum))
mean_value<-as.matrix(sort(unique(Vx[,1]),decreasing = FALSE))
temp_value<-t(cbind(mean_value,TTemp_value))
temp_value
TTemp_value<-as.matrix(tapply(Vx[,2],Vx[,1],sum))
mean_value<-as.matrix(sort(unique(Vx[,1]),decreasing = FALSE))
temp_value<-cbind(mean_value,TTemp_value)
temp_value
r<-round((length(data[,2]))/q)
r
My_Nean_New_ratio_computing_modes<-function(data)
{
data1<-unique(data[,1])
q<-length(data1)
Vx<-vector()
for(i in 1:q)
{
x<-Data[Data[,1]==data1[i],2]
v<-as.data.frame(t(table(x)))[,c(2,3)]
xx<-v[,2][match(x,v[,1])]
m<-length(x)
px<-xx/m
Lx<-cbind(x,px)
Vx<-rbind(Vx,Lx)
}
temp_Vx<-as.matrix(tapply(Vx[,2],Vx[,1],sum))
att_Vx<-sort(unique(data[,2]),decreasing = FALSE)
att_ind<-cbind(att_Vx,temp_Vx)
temp_value<-att_ind[order(att_ind[,2],decreasing = T),]
row.names(temp_value)<-c(1:length(att_Vx))
r<-round((sum(length(data[,2])))/q)
SS<-vector()
TT<-unique(temp_value[,2])
for(i in 1:length(TT))
{
SS[i]<-length(which(TT[i]==temp_value[,2]))
}
TT_matrix<-matrix(c(TT),ncol=1)
SS_matrix<-matrix(c(SS),ncol=1)
Ttemp_value<-cbind(TT_matrix,SS_matrix)
nT<-nrow(Ttemp_value)
aa<-0
bb<-0
for(m in 1:nT)
{
aa<-length(which(temp_value[,2]==max(temp_value[,2])))
bb<-(bb+aa)
result<-temp_value[(1:aa),]
if (bb>=r)  break
else  temp_value<-temp_value[-(1:aa),]
}
tempzz<-vector()
temp_value<-att_ind[order(att_ind[,2],decreasing = T),]
row.names(temp_value)<-c(1:length(att_Vx))
new_mode<-vector()
dd<-which(temp_value[,1]==result[1])[1]
new_mode<-as.matrix(temp_value[1:(dd-1),1])
tempzz<-t(combn(result,r-length(new_mode)))
nt<-nrow(tempzz)
union_value_F<-vector()
for(j in 1:nt)
{
union_value_frequency<-0
for(i in 1:length(new_mode))
{
union_value<-union(new_mode[i],tempzz[j,])
for(e in 1:q)
{
data2<-data[data[,1]==data1[e],2]
if(all(is.element(union_value,data2)))
{
union_value_frequency<-length(union_value)/length(data2)
union_value_frequency<-union_value_frequency+1}
}
}
union_value_F[j]<-union_value_frequency
}
cc<-which(union_value_F==max( union_value_F))[1]
NEW_modes<-union(new_mode,tempzz[cc,])
}
Data<-as.matrix(Data)
if(is.null(InitialCenters)){
LN<-as.matrix(unique(Data[,1]))
InitialCenters<-sample(LN,K)
}
ICenters<-vector()
IniCenters<-vector()
for(i in 1:length(InitialCenters))
{
ICenters<-Data[Data[,1]==InitialCenters[i],2]
Ini_Centers<-cbind(i,ICenters)
IniCenters<-rbind(IniCenters,Ini_Centers)
}
ni<-as.matrix(IniCenters)
udata<-as.matrix(unique(Data[,1]))
#????cid为??????????示????
cid<-matrix(0,nrow=1,ncol=K)
nr<-matrix(1,nrow=1,ncol=K)
nj<-vector()
iter<-1
objectvalue<-vector()
dist<-vector()
iiter<-7
#??录??始?亩???modes
while(iter<=iiter)
{
{
ptm<-proc.time()
for(i in 1:length(udata))
{
i_bolck_Newdata<-Data[Data[,1]==udata[i],2]
for(j in 1:K)
{
k_block<-ni[ni[,1]==j,2]
Dist<-New_ratio_distance_between_objects(i_bolck_Newdata,k_block)
dist[j]<-Dist
}
dist<-as.matrix(dist)
N<-nrow(dist)
for(q in 1:N)
{
DS<-dist[q,]
if(DS==0){
D_Dist[q]<-1
}else{
w<-matrix(c(DS),nrow=K,ncol=1)
D_Dist[q]<-1/(sum((w/dist)^10))
}
}
Fw_dist<-as.matrix(D_Dist)
ind<-which(Fw_dist==max(Fw_dist[,1]),arr.ind=T)[1]
cid[i]<-ind
}
nr<-table(cid)
#???????趾?????????
temp_new_clusters<-vector()
modesset<-vector()
new_modesset<-vector()
NEW_modesset<-vector()
for(p in 1:K)
{
#?业?每一???????????荩???为?麓渭????木???????
np<-length(which(cid==p))
t_temp<-udata[which(cid==p)]
New_data<-vector()
if(np==1){
modesset<-matrix(c(Data[which(Data[,1]==t_temp),][,2]),ncol=1)
}else
{
for(j in 1:np)
{
New_data<-rbind(New_data,Data[Data[,1]==t_temp[j],])
}
modesset<-My_Nean_New_ratio_computing_modes(New_data)
}
modesset<-as.matrix(modesset)
new_modesset<-cbind(p,modesset)
NEW_modesset<-rbind(NEW_modesset,new_modesset)
}
nj<-as.matrix(NEW_modesset)
}
ni<-nj
iter<-iter+1
}
cat("当前迭代次数iter=",iter,"\n")
cat("每个数据的聚类结果为","\n",cid,"\n")
cat("每一类中的数据个数为","\n",nr,"\n")
cat("更新后的聚类中心为","\n")
print(nj)
cat("运行时间为","\n")
print(proc.time()-ptm)
