cid<-vector(length=n)
oldcia<-matrix(1,nrow=1,ncol=K)
nr<-matrix(0,nrow=1,ncol=K)
if(is.null(InitialCenters)){
centers<-data[sample(n,K),]
}else{
centers<-data[InitialCenters,]
}
row.names(centers)<-c(1:K)
ni<-centers
ni
nid<-nrow(ni)
if(nid!=K)
print(error)
#Set up maximum number of iterations
iter<-1
{
ptm<-proc.time()
for(i in 1:n)
{
q<-matrix(c(rep(data[i, ],K)),nrow=K,ncol=d,byrow=T)
dist<-Distance_of_Categorical(q,ni)
ind<-which(dist==min(dist[,1]),arr.ind=T)[1]
cid[i]<-ind
}
nj<-ni
data1<-vector()
for(i in 1:K)
{
data1<-data[(cid==i),]
if(length(data1)!=0)
{
nr[,i]<-dim(data1)[1]
nj[i,]<-Find_Mode(data1)
}
}
cat("当前迭代次数iter=",iter,"\n")
cat("每个数据的聚类结果为","\n",cid,"\n")
cat("每一类中的数据个数为","\n",nr,"\n")
cat("更新后的聚类中心为","\n")
print(nj)
cat("运行时间为","\n")
proc.time()-ptm
if(all(nj==ni))  break
}
proc.time()-ptm
print(proc.time()-ptm)
ni<-nj
iter<-iter+1
{
ptm<-proc.time()
for(i in 1:n)
{
q<-matrix(c(rep(data[i, ],K)),nrow=K,ncol=d,byrow=T)
dist<-Distance_of_Categorical(q,ni)
ind<-which(dist==min(dist[,1]),arr.ind=T)[1]
cid[i]<-ind
}
nj<-ni
data1<-vector()
for(i in 1:K)
{
data1<-data[(cid==i),]
if(length(data1)!=0)
{
nr[,i]<-dim(data1)[1]
nj[i,]<-Find_Mode(data1)
}
}
cat("当前迭代次数iter=",iter,"\n")
cat("每个数据的聚类结果为","\n",cid,"\n")
cat("每一类中的数据个数为","\n",nr,"\n")
cat("更新后的聚类中心为","\n")
print(nj)
cat("运行时间为","\n")
print(proc.time()-ptm)
if(all(nj==ni))  break
}
library(MYKS)
data
K
iiter
InitialCenters<-NULL
Hard_K_Mode(data,k,iiter,InitialCenters)
library(parallel)
res<-vector()
cl.cores<-detectCores()-2
cl<-makeCluster(cl.cores)
result<-clusterEvalQ(cl,library(MYKS))
res<-parLapply(cl=cl,Hard_K_Mode(data,k,iiter,InitialCenters))
stopCluster(cl)
library(parallel)
system.time({
res<-vector()
cl.cores<-detectCores()-2
cl<-makeCluster(cl.cores)
result<-clusterEvalQ(cl,library(MYKS))
res<-parLapply(cl=cl,Hard_K_Mode(data,k,iiter,InitialCenters))
stopCluster(cl)
})
InitialCenters<-c(15,28,39,67,88,90,99)
{
n<-nrow(data)
d<-ncol(data)
}
cid<-vector(length=n)
oldcia<-matrix(1,nrow=1,ncol=K)
nr<-matrix(0,nrow=1,ncol=K)
if(is.null(InitialCenters)){
centers<-data[sample(n,K),]
}else{
centers<-data[InitialCenters,]
}
row.names(centers)<-c(1:K)
ni<-centers
ni
iter<-1
Hard_K_Mode<-function(data,k,InitialCenters)
{
{
n<-nrow(data)
d<-ncol(data)
}
cid<-vector(length=n)
#Make this different to get the loop started.
oldcia<-matrix(1,nrow=1,ncol=K)
#The number in each cluster.
nr<-matrix(0,nrow=1,ncol=K)
if(is.null(InitialCenters)){
centers<-data[sample(n,K),]
}else{
centers<-data[InitialCenters,]
}
row.names(centers)<-c(1:K)
ni<-centers
nid<-nrow(ni)
if(nid!=K)
print(error)
#Set up maximum number of iterations
iter<-1
while(iter<=iiter)
{
{
ptm<-proc.time()
for(i in 1:n)
{
q<-matrix(c(rep(data[i, ],K)),nrow=K,ncol=d,byrow=T)
dist<-Distance_of_Categorical(q,ni)
ind<-which(dist==min(dist[,1]),arr.ind=T)[1]
cid[i]<-ind
}
nj<-ni
data1<-vector()
for(i in 1:K)
{
data1<-data[(cid==i),]
if(length(data1)!=0)
{
nr[,i]<-dim(data1)[1]
nj[i,]<-Find_Mode(data1)
}
}
if(all(nj==ni))  break
}
ni<-nj
iter<-iter+1
}
cat("当前迭代次数iter=",iter,"\n")
cat("每个数据的聚类结果为","\n",cid,"\n")
cat("每一类中的数据个数为","\n",nr,"\n")
cat("更新后的聚类中心为","\n")
print(nj)
cat("运行时间为","\n")
print(proc.time()-ptm)
}
for(i in 1:n)
{
q<-matrix(c(rep(data[i, ],K)),nrow=K,ncol=d,byrow=T)
dist<-Distance_of_Categorical(q,ni)
ind<-which(dist==min(dist[,1]),arr.ind=T)[1]
cid[i]<-ind
}
nj<-ni
data1<-vector()
Distance_of_Categorical<-function(Data1,Data2)
{
{
n<-nrow(Data1)
d<-ncol(Data1)
}
dataset<-vector()
Distance<-vector()
{
for(i in 1:n){
Distance=0
for(j in 1:d){
if (Data1[i,j]!=Data2[i,j])
Distance<-Distance+1
}
dataset[i]<-Distance
}
}
dist<-matrix(c(dataset),ncol=1)
}
Find_Mode<-function(Data)
{
row<-nrow(Data)
column<-ncol(Data)
CColumnValue<-vector()
New_Mode<-vector()
dataset1<-vector()
NNew_Mode<-vector()
for(i in 1:column)
{
CColumnValue<-matrix(c(unique(Data[,i])),ncol=1)
for(j in 1:length( CColumnValue))
{m<-length(which(Data[,i]==CColumnValue[j,]))
dataset1[j]<-m
}
q<-min(which((dataset1==max(dataset1)),arr.ind=T))
New_Mode[i]<-CColumnValue[q,]
}
NNew_Mode<-matrix(c(New_Mode),nrow=1)
}
for(i in 1:n)
{
q<-matrix(c(rep(data[i, ],K)),nrow=K,ncol=d,byrow=T)
dist<-Distance_of_Categorical(q,ni)
ind<-which(dist==min(dist[,1]),arr.ind=T)[1]
cid[i]<-ind
}
nj<-ni
data1<-vector()
nj
for(i in 1:K)
{
data1<-data[(cid==i),]
if(length(data1)!=0)
{
nr[,i]<-dim(data1)[1]
nj[i,]<-Find_Mode(data1)
}
}
nj
data
{
n<-nrow(data)
d<-ncol(data)
}
cid<-vector(length=n)
oldcia<-matrix(1,nrow=1,ncol=K)
nr<-matrix(0,nrow=1,ncol=K)
InitialCenters<-NULL
if(is.null(InitialCenters)){
centers<-data[sample(n,K),]
}else{
centers<-data[InitialCenters,]
}
centers
A<-centers
B<-unique(centers)
length(A)
length(B)
B<-unique(centers)
B
A
if(is.null(InitialCenters)){
centers<-data[sample(n,K),]
}else{
centers<-data[InitialCenters,]
}
A<-centers
B<-unique(centers)
while(nrow(A)!=nrow(B))
{centers<-data[sample(n,K),]
A<-centers
B<-unique(centers)}
ni<-centers
ni
row.names(ni)<-c(1:K)
ni
for(i in 1:n)
{
q<-matrix(c(rep(data[i, ],K)),nrow=K,ncol=d,byrow=T)
dist<-Distance_of_Categorical(q,ni)
ind<-which(dist==min(dist[,1]),arr.ind=T)[1]
cid[i]<-ind
}
nj<-ni
data1<-vector()
for(i in 1:K)
{
data1<-data[(cid==i),]
if(length(data1)!=0)
{
nr[,i]<-dim(data1)[1]
nj[i,]<-Find_Mode(data1)
}
}
cat("当前迭代次数iter=",iter,"\n")
cat("每个数据的聚类结果为","\n",cid,"\n")
cat("每一类中的数据个数为","\n",nr,"\n")
cat("更新后的聚类中心为","\n")
print(nj)
cat("运行时间为","\n")
print(proc.time()-ptm)
Data<-as.matrix(Data)
if(is.null(InitialCenters)){
LN<-as.matrix(unique(Data[,1]))
InitialCenters<-sample(LN,K)
}
ICenters<-vector()
IniCenters<-vector()
for(i in 1:length(InitialCenters))
{
ICenters<-Data[Data[,1]==InitialCenters[i],2]
Ini_Centers<-cbind(i,ICenters)
IniCenters<-rbind(IniCenters,Ini_Centers)
}
ni<-as.matrix(IniCenters)
udata<-as.matrix(unique(Data[,1]))
#????cid为??????????示????
cid<-matrix(0,nrow=1,ncol=K)
nr<-matrix(1,nrow=1,ncol=K)
nj<-vector()
iter<-1
objectvalue<-vector()
dist<-vector()
iiter<-100
#??录??始?亩???modes
while(nj!=ni)
{
{
ptm<-proc.time()
for(i in 1:length(udata))
{
i_bolck_Newdata<-Data[Data[,1]==udata[i],2]
#????每?????莸????????牡木???
for(j in 1:K)
{
k_block<-ni[ni[,1]==j,2]
Dist<-New_ratio_distance_between_objects(i_bolck_Newdata,k_block)
dist[j]<-Dist
}
ind<-which(dist==min(dist),arr.ind=T)[1]
cid[i]<-ind
}
nr<-table(cid)
#???????趾?????????
temp_new_clusters<-vector()
modesset<-vector()
new_modesset<-vector()
NEW_modesset<-vector()
for(p in 1:K)
{
#?业?每一???????????荩???为?麓渭????木???????
np<-length(which(cid==p))
t_temp<-udata[which(cid==p)]
New_data<-vector()
if(np==1){
modesset<-matrix(c(Data[which(Data[,1]==t_temp),][,2]),ncol=1)
}else
{
for(j in 1:np)
{
New_data<-rbind(New_data,Data[Data[,1]==t_temp[j],])
}
modesset<-Mean_New_ratio_computing_modes(New_data)
}
modesset<-as.matrix(modesset)
new_modesset<-cbind(p,modesset)
NEW_modesset<-rbind(NEW_modesset,new_modesset)
}
nj<-NEW_modesset
}
ni<-nj
iter<-iter+1
}
cat("??前????????iter=",iter,"\n")
cat("每?????莸木???????为","\n",cid,"\n")
cat("每一???械????莞???为","\n",nr,"\n")
cat("???潞??木???????为","\n")
print(nj)
cat("????时??为","\n")
print(proc.time()-ptm)
{
n<-nrow(data)
d<-ncol(data)
}
cid<-vector(length=n)
#Make this different to get the loop started.
oldcia<-matrix(1,nrow=1,ncol=K)
#The number in each cluster.
nr<-matrix(0,nrow=1,ncol=K)
if(is.null(InitialCenters)){
centers<-data[sample(n,K),]
}else{
centers<-data[InitialCenters,]
}
row.names(centers)<-c(1:K)
A<-centers
B<-unique(centers)
while(nrow(A)!=nrow(B))
{centers<-data[sample(n,K),]
A<-centers
B<-unique(centers)
}
ni<-centers
nid<-nrow(ni)
if(nid!=K)
print(error)
#Set up maximum number of iterations
iter<-1
iiter<-100
while(iter<=iiter)
{
{
ptm<-proc.time()
for(i in 1:n)
{
q<-matrix(c(rep(data[i, ],K)),nrow=K,ncol=d,byrow=T)
dist<-Distance_of_Categorical(q,ni)
ind<-which(dist==min(dist[,1]),arr.ind=T)[1]
cid[i]<-ind
}
nj<-ni
data1<-vector()
for(i in 1:K)
{
data1<-data[(cid==i),]
if(length(data1)!=0)
{
nr[,i]<-dim(data1)[1]
nj[i,]<-Find_Mode(data1)
}
}
if(all(nj==ni))  break
}
ni<-nj
iter<-iter+1
}
cat("当前迭代次数iter=",iter,"\n")
cat("每个数据的聚类结果为","\n",cid,"\n")
cat("每一类中的数据个数为","\n",nr,"\n")
cat("更新后的聚类中心为","\n")
print(nj)
cat("运行时间为","\n")
print(proc.time()-ptm)
data
K
InitialCenters
{
n<-nrow(data)
d<-ncol(data)
}
cid<-vector(length=n)
oldcia<-matrix(1,nrow=n,ncol=K)
nr<-matrix(0,nrow=n,ncol=K)
if(is.null(InitialCenters)){
centers<-data[sample(n,K),]
}else{
centers<-data[InitialCenters,]
}
row.names(centers)<-c(1:K)
A<-centers
B<-unique(centers)
while(nrow(A)!=nrow(B))
{centers<-data[sample(n,K),]
A<-centers
B<-unique(centers)
}
ni<-centers
ni
nid<-nrow(ni)
if(nid!=K)
print(error)
iter<-1
FW_dist<-vector()
Dist<-vector()
for(i in 1:n)
{
q<-matrix(c(rep(data[i,],K)),nrow=K,ncol=d,byrow=T)
dist<-Distance_of_Categorical(q,ni)
N<-nrow(dist)
for(j in 1:N)
{
Ds<-dist[j,]
if(Ds==0){
Dist[j]<-1
}else{
W<-matrix(c(Ds),nrow=K,ncol=1)
Dist[j]<-1/(sum((W/dist)^10))
}
}
Fw_dist<-as.matrix(Dist)
ind<-which(Fw_dist==max(Fw_dist[,1]),arr.ind = T)[1]
cid[i]<-ind
}
cid
nr<-table(cid)
nr
nj<-ni
data1<-vector()
for(i in 1:K)
{
data1<-data[(cid==i),]
if(length(data1)!=0)
{
nj[i,]<-Find_Mode(data1)
}
}
nj
